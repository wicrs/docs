openapi: 3.0.0
info:
  version: v2
  license:
    name: GNU General Public License v3.0
    url: https://github.com/wicrs/docs/blob/master/LICENSE
  title: WICRS API
  contact:
    name: WICRS Repositories
    email: none@example.com
    url: https://github.com/wicrs
  description: The API for WICRS.
servers:
  - description: Local testing environement
    url: http://localhost:8080/v2
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wicrs/wicrs/v2
components:
  securitySchemes:
    user_token_auth:
      type: http
      scheme: basic
  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: string
      description: UUID of a user
    hub_id:
      name: hub_id
      in: path
      required: true
      schema:
        type: string
      description: UUID of a hub
    channel_id:
      name: channel_id
      in: path
      required: true
      schema:
        type: string
      description: UUID of a channel in the hub
    message_id:
      name: message_id
      in: path
      required: true
      schema:
        type: string
      description: UUID of a message in the channel
    group_id:
      name: groupId
      in: path
      required: true
      schema:
        type: string
      description: UUID of a permission group
    hub_permission:
      name: hub_permission
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/hub_permission'
    channel_permission:
      name: channel_permission
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/channel_permission'  
    permission_setting:
      name: permission_setting
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/permission_setting'
  responses:
    not_found:
      description: Resource does not exist or user does not have permission to access it
    unauthorized_error:
      description: Authentication information is missing or invalid
      content:
        text/plain:
          schema:
            type: string
            example: 'Authentication information is missing or invalid'
    user:
      description: A single user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    stripped_user:
      description: A single user with personal information removed (email and oauth service used, as well as the UUIDs of hubs they are members of, replaced with SHA256 hashes)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    malformed_request:
      description: Malformed request.
  schemas:
    permission_setting:
      description: Current state of a permission for a user or a permission group
      type: string
      enum: ["TRUE", "FALSE", "NONE"]
    channel_permission:
      description: Permissions that apply only to channels
      type: string
      enum: [All, ViewChannel, Configure, SendMessage, ReadMessage]
    hub_permission:
      description: Permissions that apply everywhere in a hub
      type: string
      enum: [All, ViewChannels, ConfigureChannels, Administrate, CreateChannel, DeleteChannel, CreateCategory, DeleteCategory, ArrangeChannels, SendMessage, ReadMessage, Invite, Mute, Unmute, Kick, Ban, Unban]
    hub_permission_map:
      description: Map of hub permissions and their set values
      type: object
      additionalProperties:
        $ref: '#/components/schemas/hub_permission_map_item'
    channel_permission_map:
      description: Map of channel UUIDs to channel permissions and their set values
      type: object
      additionalProperties:
        type: object
        required: [channel_id, permissions]
        properties:
          channel_id:
            type: string
          permissions:
            $ref: '#/components/schemas/channel_permission_map_item'
    channel_permission_map_item:
      description: Channel permission and it's current setting
      type: object
      required: [permission, setting]
      properties:
        permission:
          $ref: '#/components/schemas/channel_permission'
        setting:
          $ref: '#/components/schemas/permission_setting'
    hub_permission_map_item:
      description: Hub permission and it's current setting
      type: object
      required: [permission, setting]
      properties:
        permission:
          $ref: '#/components/schemas/hub_permission'
        setting:
          $ref: '#/components/schemas/permission_setting'
    date:
      description: Time in milliseconds from 1 Jan 1970
      type: integer
    hub_member:
      type: object
      required: [user, joined, hub, nickname, groups, hub_permissions, channel_permissions]
      properties:
        user:
          description: UUID of the user this member represents
          type: string
        joined:
          $ref: '#/components/schemas/date'
        hub:
          description: UUID of the hub this member is from
          type: string
        nickname:
          description: Name used by the member when in this hub
          type: string
        groups:
          description: UUIDs of the permission groups this member is part of
          type: array
          items:
            type: string
        hub_permissions:
          $ref: '#/components/schemas/hub_permission_map'
        channel_permissions:
          $ref: '#/components/schemas/channel_permission_map'
    hub:
      description: Represents a hub in a WICRS server
      type: object
      required: [id, owner, default_group, created, name, groups, members, bans, channels]
      properties:
        id:
          description: UUID of the hub
          type: string
        owner:
          description: UUID of the user that owns the hub
          type: string
        mutes:
          description: List of IDs of users that have been muted in the hub
          type: array
          items:
            type: string
        bans:
          description: List of IDs of users that have been banned from the hub
          type: array
          items:
            type: string
        default_group:
          description: UUID of the permission group assigned to new members
          type: string
        created:
          $ref: '#/components/schemas/date'
        name:
          description: Name of the hub
          type: string
        members:
          description: Members of the hub
          type: object
          additionalProperties:
            type: object
            properties:
              id:
                description: UUID of the user this member represents
                type: string
              group:
                $ref: '#/components/schemas/hub_member'
        groups:
          description: Permission groups that belong to this hub
          type: object
          additionalProperties:
            type: object
            required: [id, group]
            properties:
              id:
                description: UUID of the group
                type: string
              group:
                $ref: '#/components/schemas/permission_group'
        channels:
          description: Channels in the hub
          type: object
          additionalProperties:
            type: object
            required: [id, channel]
            properties:
              id:
                description: UUID of the channel
                type: string
              channel:
                $ref: '#/components/schemas/channel'
    permission_group:
      description: Represents a group of permissions that can be given to any member of a hub the hub the group is in
      type: object
      required: [id, created, hub_permissions, channel_permissions]
      properties:
        id:
          description: UUID of the hub the group is in
          type: string
        created:
          $ref: '#/components/schemas/date'
        hub_permissions:
          $ref: '#/components/schemas/hub_permission_map'
        channel_permissions:
          $ref: '#/components/schemas/channel_permission_map'
    channel:
      description: Represents a channel in a WICRS server
      type: object
      required: [id, created, name, hub_id]
      properties:
        id:
          description: UUID of the channel
          type: string
        created:
          $ref: '#/components/schemas/date'
        name:
          description: Name of the channel
          type: string
        hub_id:
          description: UUID of the hub the channel is in
          type: string
    message:
      description: Message sent in a text channel
      type: object
      required: [id, sent, sender, content]
      properties:
        id:
          description: ID of the message
          type: string
        sent:
          $ref: '#/components/schemas/date'
        sender:
          description: UUID of the user that sent the message
          type: string
        content:
          description: Content of the sent message
          type: string
        edited:
          type: object
          description: Times the message was edited
          properties:
            times:
              type: integer
              description: How many times the message was edited
            dates:
              type: array
              items:
                $ref: '#/components/schemas/date'
    user:
      description: Represents a user of WICRS
      type: object
      required: [id, oauth_service, created, email, in_hubs, username]
      properties:
        id:
          description: ID of the user, a hash of the email and if of the account they used to login to their chosen OAuth2 service
          type: string
        username:
          description: Username of the user
          type: string
        oauth_service:
          description: The name of the OAuth2 service the user used to sign up
          type: string
          enum: [GitHub]
        created:
          $ref: '#/components/schemas/date'
        email:
          description: The primary email of the account the user used for their chosen OAuth2 service
          type: string
        in_hubs:
          description: A list of the UUIDs of hubs the user is a member of
          type:  array
          items:
            description: The UUID of a hub
            type: string
security:
  - user_token_auth: []
paths:
  '/login/{service}':
    get:
      description: Start the OAuth login sequence
      operationId: oauthStart
      parameters:
        - name: service
          in: path
          required: true
          schema:
            type: string
            enum: [GitHub]
          description: OAuth service to use
      responses:
        302:
          description: Redirect to the chosen OAuth service's API.
      tags:
        - auth
  '/auth/{service}':
    get:
      description: Finish the OAuth login sequence
      operationId: oauthFinish
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
        - name: service
          in: path
          required: true
          schema:
            type: string
            enum: [GitHub]
          description: OAuth service used in the oauthStart step
      responses:
        200:
          description: Authentication success
          content:
            application/json:
              schema:
                type: object
                description: The authentication details for the user
                properties:
                  id:
                    type: string
                  token:
                    type: string
        400:
          description: Invalid state/code pair given
      tags:
        - auth
  /invalidate_tokens:
    post:
      description: Invalidate all authentication tokens for the authenticated user.
      operationId: invalidateTokes
      responses:
        200:
          description: Successfully invalidated all authentication tokens for the authenticated user.
        403:
          description: Not authenticated correctly
      tags:
        - auth
  /user:
    get:
      description: Get the information of the authenticated user
      operationId: userGet
      responses:
        200:
          $ref: '#/components/responses/user'
        403:
          description: Not authenticated correctly
      tags:
        - user
  '/user/{id}':
    get:
      description: Get the public information of another user
      operationId: userGetOther
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        200:
          $ref: '#/components/responses/stripped_user'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - user
  '/hub/create/{name}':
    post:
      description: Create a new hub owned by the authenticated user
      operationId: hubCreate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name for the new hub
      responses:
        200:
          description: Hub creation success, gives ID string
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
        404:
          $ref: '#/components/responses/not_found'
        500:
          description: Unable to create the new hub.
      tags:
        - hub
  '/hub/{hub_id}':
    get:
      description: Get a hub
      operationId: hubGet
      parameters:
        - $ref: '#/components/parameters/hub_id'
      responses:
        200:
          description: Hub info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hub'
        404:
          $ref: '#/components/responses/not_found'
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
        500:
          description: Unable to load the hub data.
      tags:
        - hub
    delete:
      description: Delete a hub
      operationId: hubDelete
      parameters:
        - $ref: '#/components/parameters/hub_id'
      responses:
        200:
          description: Hub deletion success
        404:
          $ref: '#/components/responses/not_found'
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
        500:
          description: Unable to delete the hub.
      tags:
        - hub
  '/hub/rename/{hub_id}':
    put:
      description: Rename a hub
      operationId: hubRename
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: The new name for the hub
      responses:
        200:
          description: Hub deletion success
          content:
            text/plain:
              schema:
                type: string
                description: The previous name of the hub
                example: 'Test Hub 1'
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/hub/{hub_id}/is_banned/{user_id}':
    get:
      description: Check if a user is banned from a hub
      operationId: hubBanCheck
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User ban status
          content:
            text/plain:
              schema:
                type: boolean
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/hub/{hub_id}/is_muted/{user_id}':
    get:
      description: Check if a user is muted in a hub
      operationId: hubMuteCheck
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User mute status
          content:
            text/plain:
              schema:
                type: boolean
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}':
    get:
      description: Get information on a member of a hub
      operationId: hubMemberGet
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Hub member get success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hub_member'
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}/ban':
    post:
      description: Ban a user from a hub
      operationId: hubBanUser
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User ban success
        403:
          description: User does not have permission to ban users in that hub
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}/unban':
    post:
      description: Unban a user from a hub
      operationId: hubUnbanUser
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User unban success
        403:
          description: User does not have permission to unban users in that hub
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}/kick':
    post:
      description: Kick a user from a hub
      operationId: hubKickUser
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User kick success
        403:
          description: User does not have permission to kick users in that hub
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}/mute':
    post:
      description: Mute a user in a hub
      operationId: hubMuteUser
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User mute success
        403:
          description: User does not have permission to mute users in that hub
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/member/{hub_id}/{user_id}/unmute':
    post:
      description: Unmute a user in a hub
      operationId: hubUnmuteUser
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User unmute success
        403:
          description: User does not have permission to unmute users in that hub
        404:
          $ref: '#/components/responses/not_found'
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/channel/create/{hub_id}/{name}':
    post: 
      description: Create a new channel in a hub
      operationId: hubChannelCreate
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the channel
      responses:
        200:
          description: Channel creation success
          content:
            text/plain:
              schema:
                type: string
                description: The UUID of the new channel
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to create channels in that hub
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
  '/channel/rename/{hub_id}/{channel_id}':
    put: 
      description: Create a new channel in a hub
      operationId: hubChannelRename
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
        - name: new_name
          in: query
          required: true
          schema:
            type: string
          description: New name for the channel
      responses:
        200:
          description: Channel rename success
          content:
            text/plain:
              schema:
                type: string
                description: The channel's previous name
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to rename that channel
        400:
          $ref: '#/components/responses/malformed_request'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
  '/channel/delete/{hub_id}/{channel_id}':
    delete: 
      description: Delete a channel in a hub
      operationId: hubChannelDelete
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
      responses:
        200:
          description: Channel deletion success
          content:
            text/plain:
              schema:
                type: string
                description: The name of the deleted channel
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to delete that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - channel
  '/channel/{hub_id}/{channel_id}':
    get: 
      description: Get channel metadata
      operationId: hubChannelGet
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
      responses:
        200:
          description: Channel get success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channel'
        404:
          $ref: '#/components/responses/not_found'
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - channel
  '/channel/{hub_id}/{channel_id}/search_for/{term}':
    get: 
      description: Search for messages in the a channel
      operationId: hubChannelSearchMessages
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
        - name: term
          in: path
          required: true
          schema:
            type: string
          description: String to search for
        - name: max
          in: query
          schema:
            type: integer
            minimum: 1
            default: 128
            maximum: 1024
          description: Maximum number of results
      responses:
        200:
          description: Got messages successfully
          content:
            application/json:
              schema:
                type: array
                description: Array containing all messages found
                items:
                  $ref: '#/components/schemas/message'
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to view messages in that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - message
  '/channel/{hub_id}/{channel_id}/last_messages':
    get: 
      description: Send a message in a channel
      operationId: hubChannelGetLastNMessages
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
        - name: count
          in: query
          schema:
            type: integer
            minimum: 1
            default: 128
            maximum: 1024
          description: Number of messages to get
        - name: from
          in: query
          schema:
            type: string
          description: Message to start getting messages from, if empty starts from last message sent in channel
      responses:
        200:
          description: Got messages successfully
          content:
            application/json:
              schema:
                type: array
                description: Array containing the number of messages requested or less if the channel did not have enough
                items:
                  $ref: '#/components/schemas/message'
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to view messages in that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - message
  '/channel/{hub_id}/{channel_id}/send_message':
    post: 
      description: Send a message in a channel
      operationId: hubChannelSendMessage
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
        - name: message
          in: query
          required: true
          schema:
            type: string
          description: Contents of the message
      responses:
        200:
          description: Message sent successfully
          content:
            text/plain:
              schema:
                type: string
                description: UUID of the message
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to send messages in that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - message
  '/message/{hub_id}/{channel_id}/{message_id}':
    get: 
      description: Get a message from a channel by it's ID
      operationId: hubChannelGetMessage
      parameters:
        - $ref: '#/components/parameters/hub_id'
        - $ref: '#/components/parameters/channel_id'
        - $ref: '#/components/parameters/message_id'
      responses:
        200:
          description: Message get success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        404:
          $ref: '#/components/responses/not_found'
        403:
          description: User does not have permission to read messages in that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
        400:
          $ref: '#/components/responses/malformed_request'
      tags:
        - message
tags:
  - name: auth
    description: Operations related to authentication
  - name: user
    description: Operations related to users
  - name: group
    description: Operations related to permission groups
  - name: hub
    description: Operations related to hubs
  - name: channel
    description: Operations related to channels in hubs
  - name: message
    description: Operations related to messages