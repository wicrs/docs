openapi: 3.0.0
info:
  version: 1.0.0
  license:
    name: GNU General Public License v3.0
    url: https://github.com/wicrs/docs/blob/master/LICENSE
  title: WICRS API
  contact:
    name: WICRS Repositories
    email: none@example.com
    url: https://github.com/wicrs
  description: The API for WICRS.
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wicrs/wicrs/1.0.0
components:
  securitySchemes:
    user_token_auth:
      type: http
      scheme: basic
  responses:
    unauthorized_error:
      description: Authentication information is missing or invalid
      content:
        text/plain:
          schema:
            type: string
            example: 'Authentication information is missing or invalid'
    user:
      description: A single user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    stripped_user:
      description: A single user with personal information removed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/stripped_user'
    account:
      description: A single account
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/account'
    stripped_account:
      description: A single account with the IDs of hubs replaced with hashes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/account'
    string_constraints:
      description: Information on the constraints for a string
      content:
        application/json:
          schema:
            type: object
            description: String format information
            required: [allowed_chars, max_chars, min_chars]
            properties:
              allowed_chars:
                type: string
                description: Characters that are allowed to be used in the string
                example: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz-_.0123456789'
              max_chars:
                type: integer
                description: Maximum length of the string in characters
                example: 32
              min_chars:
                type: integer
                description: Minimum length of the string in characters
                example: 1
  schemas:
    permission_setting:
      description: Current state of a permission for a user or a permission group
      type: string
      enum: ["TRUE", "FALSE", "NONE"]
    channel_permission:
      description: Permissions that apply only to channels
      type: string
      enum: [All, ViewChannel, Configure, SendMessage, ReadMessage, MuteUser]
    hub_permission:
      description: Permissions that apply everywhere in a hub
      type: string
      enum: [All, ViewChannels, ConfigureChannels, Administrate, CreateChannel, DeleteChannel, CreateCategory, DeleteCategory, ArrangeChannels, SendMessage, ReadMessage, Invite, Mute, Unmute, Kick, Ban, Unban, AddBot]
    hub_permission_map:
      description: Map of hub permissions and their set values
      type: object
      additionalProperties:
        $ref: '#/components/schemas/hub_permission_map_item'
    channel_permission_map:
      description: Map of channel UUIDs to channel permissions and their set values
      type: object
      additionalProperties:
        type: object
        required: [channel_id, permissions]
        properties:
          channel_id:
            type: string
          permissions:
            $ref: '#/components/schemas/channel_permission_map_item'
    channel_permission_map_item:
      description: Channel permission and it's current setting
      type: object
      required: [permission, setting]
      properties:
        permission:
          $ref: '#/components/schemas/channel_permission'
        setting:
          $ref: '#/components/schemas/permission_setting'
    hub_permission_map_item:
      description: Hub permission and it's current setting
      type: object
      required: [permission, setting]
      properties:
        permission:
          $ref: '#/components/schemas/hub_permission'
        setting:
          $ref: '#/components/schemas/permission_setting'
    date:
      description: Time in milliseconds from 1 Jan 1970
      type: integer
    hub_member:
      type: object
      required: [account, joined, hub, nickname, groups, hub_permissions, channel_permissions]
      properties:
        account:
          description: UUID of the account this member represents
          type: string
        joined:
          $ref: '#/components/schemas/date'
        hub:
          description: UUID of the hub this member is from
          type: string
        nickname:
          description: Name used by the member when in this hub
          type: string
        groups:
          description: UUIDs of the permission groups this member is part of
          type: array
          items:
            type: string
        hub_permissions:
          $ref: '#/components/schemas/hub_permission_map'
        channel_permissions:
          $ref: '#/components/schemas/channel_permission_map'
    hub:
      description: Represents a hub in a WICRS server
      type: object
      required: [id, owner, default_group, created, name, groups, members, bans, channels]
      properties:
        id:
          description: UUID of the hub
          type: string
        owner:
          description: UUID of the account that owns the hub
          type: string
        bans:
          description: List of IDs of users that have been banned from the hub
          type: array
          items:
            type: string
        default_group:
          description: UUID of the permission group assigned to new members
          type: string
        created:
          $ref: '#/components/schemas/date'
        name:
          description: Name of the channel
          type: string
        members:
          description: Members of the hub
          type: object
          additionalProperties:
            type: object
            properties:
              id:
                description: UUID of the account this member represents
                type: string
              group:
                $ref: '#/components/schemas/hub_member'
        groups:
          description: Permission groups that belong to this hub
          type: object
          additionalProperties:
            type: object
            required: [id, group]
            properties:
              id:
                description: UUID of the group
                type: string
              group:
                $ref: '#/components/schemas/permission_group'
        channels:
          description: Channels in the hub
          type: object
          additionalProperties:
            type: object
            required: [id, channel]
            properties:
              id:
                description: UUID of the channel
                type: string
              channel:
                $ref: '#/components/schemas/channel'
    permission_group:
      description: Represents a group of permissions that can be given to any member of a hub the hub the group is in
      type: object
      required: [id, created, hub_permissions, channel_permissions]
      properties:
        id:
          description: UUID of the hub the group is in
          type: string
        created:
          $ref: '#/components/schemas/date'
        hub_permissions:
          $ref: '#/components/schemas/hub_permission_map'
        channel_permissions:
          $ref: '#/components/schemas/channel_permission_map'
    channel:
      description: Represents a channel in a WICRS server
      type: object
      required: [id, created, name, hub_id]
      properties:
        id:
          description: UUID of the channel
          type: string
        created:
          $ref: '#/components/schemas/date'
        name:
          description: Name of the channel
          type: string
        hub_id:
          description: UUID of the hub the channel is in
          type: string
    user:
      description: Represents a user of WICRS
      type: object
      required: [id, oauth_service, created, email, accounts]
      properties:
        id:
          description: ID of the user, a hash of the email and if of the account they used to login to their chosen OAuth2 service
          type: string
        oauth_service:
          description: The name of the OAuth2 service the user used to sign up
          type: string
        created:
          $ref: '#/components/schemas/date'
        email:
          description: The primary email of the account the user used for their chosen OAuth2 service
          type: string
        accounts:
          description: A list of the accounts the user owns
          type: object
          additionalProperties:
            $ref: '#/components/schemas/account_map_item'
    account:
      type: object
      required: [id, username, created, parent_id, is_bot, in_hubs]
      properties:
        id:
          description: UUID of the account
          type: string
        username:
          description: Username of the account
          type: string
        created:
          $ref: '#/components/schemas/date'
        parent_id:
          description: ID of the user that owns the account
          type: string
        is_bot:
          description: Whether or not the account is dedicated to automated tasks/bot work
          type: boolean
        in_hubs:
          description: A list of the UUIDs of hubs the account is a member of
          type:  array
          items:
            description: The UUID of a hub
            type: string
    account_map_item:
      type: object
      required: [id,  account]
      properties:
        id:
          type: string
        account:
          $ref: '#/components/schemas/account'
    stripped_user:
      description: A user with some information removed/hidden to allow anyone to recognise them without compromising their privacy
      type: object
      required: [id, created, accounts]
      properties:
        id:
          description: ID of the user, a hash of the email and if of the account they used to login to their chosen OAuth2 service
          type: string
        created:
          $ref: '#/components/schemas/date'
        accounts:
          description: A list of the accounts the user owns
          type: object
          additionalProperties:
            $ref: '#/components/schemas/account_map_item'
security:
  - user_token_auth: []
paths:
  /user:
    get:
      description: Get the information of the authenticated user
      operationId: userGetAuth
      responses:
        200:
          $ref: '#/components/responses/user'
        403:
          description: Not authenticated correctly
      tags:
        - user
  '/user/{id}':
    post:
      description: Get the public information of another user
      operationId: userGet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        200:
          $ref: '#/components/responses/stripped_user'
        400:
          $ref: '#/components/responses/string_constraints'
      tags:
        - user
  '/user/account/create/{name}':
    post:
      description: Get the public information of another user
      operationId: userAccountCreate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Username for the account being created
      responses:
        200:
          $ref: '#/components/responses/account'
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - account
  '/user/account/{id}/delete':
    delete:
      description: Delete one of the authenticated user's accounts
      operationId: userAccountDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the account to delete
      responses:
        200:
          description: Account deletion success
        404:
          description: User does not have an account with that UUID
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - account
  '/user/account/{id}/rename':
    put:
      description: Change the username of one of the authenticated user's accounts
      operationId: userAccountRename
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the account to rename
        - name: new_name
          in: query
          required: true
          schema:
            type: string
          description: The new username for the account
      responses:
        200:
          description: Account rename success
          content:
            text/plain:
              schema:
                type: string
                description: The previous name of the account
                example: 'Test Account 1'
        404:
          description: User does not have an account with that UUID
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - account
  '/user/account/{id}':
    get:
      description: Get the information of one of the currently authenticated user's accounts
      operationId: userAccountGetAuth
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the account
      responses:
        200:
          $ref: '#/components/responses/stripped_user'
        404:
          description: No account with that ID
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - account
  '/user/{userId}/account/{accountId}':
    get:
      description: Get the public information of a user's account
      operationId: userAccountGet
      parameters: 
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user who owns the account being requested
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: ID of the account being requested
      responses:
        200:
          $ref: '#/components/responses/stripped_user'
        404:
          description: User with that ID does not exist or they do not own an account with that ID
      tags:
        - account
  '/hub/create/{name}':
    post:
      description: Create a new hub owned by the authenticated user
      operationId: hubCreate
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of the account that will have ownership of the hub
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name for the new hub
      responses:
        200:
          description: Hub creation success
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/hub/{id}':
    get:
      description: Get a hub
      operationId: hubGet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub to be delete
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of an account that is a member of the hub
      responses:
        200:
          description: Hub info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hub'
        404:
          description: Account does not have access to a hub with that UUID
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/hub/delete/{id}':
    delete:
      description: Delete a hub
      operationId: hubDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub to be delete
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of the account that owns the hub
      responses:
        200:
          description: Hub deletion success
        404:
          description: Account does not have access to a hub with that UUID
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/hub/rename/{id}':
    put:
      description: Rename a hub
      operationId: hubRename
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub to be delete
        - name: new_name
          in: query
          required: true
          schema:
            type: string
          description: The new name for the hub
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of the account that owns the hub
      responses:
        200:
          description: Hub deletion success
          content:
            text/plain:
              schema:
                type: string
                description: The previous name of the hub
                example: 'Test Hub 1'
        404:
          description: Account does not have access to a hub with that UUID
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - hub
  '/channel/create/{id}/{name}':
    post: 
      description: Create a new channel in a hub
      operationId: hubChannelCreate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub the channel should be created in
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the channel
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of an account that has permission to create channels in the hub
      responses:
        200:
          description: Channel creation success
          content:
            text/plain:
              schema:
                type: string
                description: The UUID of the new channel
        404:
          description: Account does not have access to a hub with that UUID
        403:
          description: Account does not have permission to create channels in that hub
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
  '/channel/rename/{hubId}/{channelId}':
    put: 
      description: Create a new channel in a hub
      operationId: hubChannelRename
      parameters:
        - name: hubId
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub the channel to be renamed is in
        - name: channelId
          in: path
          required: true
          schema:
            type: string
          description: UUID of the channel to be renamed
        - name: new_name
          in: query
          required: true
          schema:
            type: string
          description: New name for the channel
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of an account that has permission to rename the channel
      responses:
        200:
          description: Channel rename success
          content:
            text/plain:
              schema:
                type: string
                description: The channel's previous name
        404:
          description: Account does not have access to a hub with that UUID or the channel does not exist
        403:
          description: Account does not have permission to rename that channel
        400:
          $ref: '#/components/responses/string_constraints'
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
  '/channel/delete/{hubId}/{channelId}':
    delete: 
      description: Delete a channel in a hub
      operationId: hubChannelDelete
      parameters:
        - name: hubId
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub the channel to be renamed is in
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of an account that has permission to delete the channel
      responses:
        200:
          description: Channel deletion success
          content:
            text/plain:
              schema:
                type: string
                description: The name of the deleted channel
        404:
          description: Account does not have access to a hub with that UUID or the channel does not exist
        403:
          description: Account does not have permission to delete that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
  '/channel/{hubId}/{channelId}':
    get: 
      description: Get channel metadata
      operationId: hubChannelGet
      parameters:
        - name: hubId
          in: path
          required: true
          schema:
            type: string
          description: UUID of the hub the channel to be renamed is in
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: accountId
          in: query
          required: true
          schema:
            type: string
          description: UUID of an account that has permission to view the channel
      responses:
        200:
          description: Channel info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channel'
        404:
          description: Account does not have access to a hub with that UUID or the channel does not exist
        403:
          description: Account does not have permission to delete that channel
        401:
          $ref: '#/components/responses/unauthorized_error'
      tags:
        - channel
tags:
  - description: Operations performed on users
    name: user
  - name: account
    description: Operations performed on accounts owned by users
  - name: hub
    description: Operations performed on hubs
  - name: channel
    description: Operations performed on channels in hubs